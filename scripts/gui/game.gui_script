------------------------ VARIABLES -----------------------------
-- Grid
local grid_length = 9
local grid_box = {}

-- Utility
local countdown_time = 1
local timer = {}
timer["delay"] = false
timer["action"] = false
timer["message"] = {}
local touch = hash("touch")

-- Nodes
local grid
local turn_box
local turn_txt
local result_box
local winner_box
local winner_txt
local replay_box
local replay_txt
local back_box
local back_txt

-- Controller
local game_controller = msg.url("main", hash("/game"), "game_controller")
local proxy_controller = msg.url("main", hash("/proxy"), "proxy_controller")


-- Game play
local next_mark
local game_mode
local active_player = 'X'
local game_completed = false

-- Color
local hover_color = vmath.vector4(0.5, 0.9, 0.9, 1)
local default_color = vmath.vector4(1, 1, 1, 1)


------------------------ FUNCTIONS -----------------------------
local function start_game()
	game_completed = false
	msg.post(game_controller, "get_mode")
	msg.post(".", "acquire_input_focus")
end


local function place_mark(i)
	gui.set_enabled(grid_box[i]["box"], true)
	gui.set_enabled(grid_box[i]["text"], true)
	grid_box[i]["tile_state"] = true
	gui.set_text(grid_box[i]["text"], next_mark)
	gui.animate(grid_box[i]["text"], "scale", 1, gui.PLAYBACK_LOOP_FORWARD, 0.5)
	msg.post(game_controller, "place_mark", {i = i})
end

local function game_complete(message)
	gui.set_enabled(grid, false)
	gui.set_enabled(turn_txt, false)

	msg.post(".", "acquire_input_focus")

	gui.set_enabled(result_box, true)
	gui.set_enabled(winner_box, true)
	gui.set_enabled(replay_box, true)
	gui.set_text(winner_txt, message)
end


local function restart_game()
	msg.post(proxy_controller, "reload_game")
end


function init(self)
	grid = gui.get_node("grid")
	turn_box = gui.get_node("turn_box")
	turn_txt = gui.get_node("turn_txt")
	result_box = gui.get_node("result_box")
	winner_box = gui.get_node("winner_box")
	winner_txt = gui.get_node("winner_txt")
	replay_box = gui.get_node("replay_box")
	replay_txt = gui.get_node("replay_txt")
	back_box = gui.get_node("back_box")
	back_txt = gui.get_node("back_txt")
	
	gui.set_enabled(result_box, false)
	gui.set_enabled(winner_box, false)
	gui.set_enabled(replay_box, false)

	local box
	local text
	local tile = {}

	local i = 1
	for x = 1, 9 do
			box = gui.get_node("box"..i)
			text = gui.get_node("text-"..i)
			gui.set_enabled(box, false)
			tile = { 
				box = box,
				text = text,
				tile_state = false,
				i = i,
			}
			table.insert(grid_box, i, tile)
			i=i+1
	end	
	start_game()
end


function on_input(self, action_id, action)
	-- Grid
	for i, v in ipairs(grid_box) do
		local current_box  = gui.pick_node(v["box"], action.x, action.y)
		if action_id == touch and current_box and action.pressed and v["tile_state"] == false then
			place_mark(v["i"])
			print("GAME MODE"..game_mode)
			if game_mode == 1  then
				msg.post(".", "release_input_focus")
				msg.post(game_controller, "play_computer")
			end
		end
	end
	
	if action_id == touch and gui.is_enabled(replay_box) and gui.pick_node(replay_box, action.x, action.y) then
		msg.post(game_controller, "replay")		
	end
	if action_id == touch and gui.is_enabled(back_box) and gui.pick_node(back_box, action.x, action.y) then
		msg.post(game_controller, "quit_game")
	end


	--hover
	if action_id == nil then
		-- hover turn 
		if gui.pick_node(turn_box, action.x, action.y) then
			gui.set_color(turn_txt, hover_color)
		else
			gui.set_color(turn_txt, default_color)
		end

		-- hover back
		if gui.pick_node(back_box, action.x, action.y) then
			gui.set_color(back_txt, hover_color)
		else
			gui.set_color(back_txt, default_color)
		end

		-- hover replay
		if gui.pick_node(replay_box, action.x, action.y) and gui.is_enabled(replay_box) then
			gui.set_color(replay_txt, hover_color)
		else
			gui.set_color(replay_txt, default_color)
		end
	end	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("game_mode") then
		game_mode = message.mode
	elseif message_id == hash("game_complete") then
		msg.post(".", "release_input_focus")
		timer["delay"] = true
		timer["action"] = true
		timer["message"] = {"gamecomplete", message.message}

	elseif  message_id == hash("next_mark") then 
		print("SETING MARK : "..message.mark)
		next_mark = message.mark
		gui.set_text(turn_txt, next_mark.."'s turn")

	elseif message_id == hash("computer_place_mark") then
		timer["delay"] = true
		timer["action"] = true
		timer["message"] = {"placemark", message.idx}

	end
end

function update(self, dt)
	if timer["delay"] == true then
		countdown_time = 2
		timer["delay"] = false
	end

	if timer["action"] == true and math.floor(countdown_time) == 0.0 then
		timer["action"] = false
		if timer["message"][1] == "placemark" then
			place_mark(timer["message"][2])
			msg.post(".", "acquire_input_focus")
			
		end
		if timer["message"][1] == "gamecomplete" then
			game_complete(timer["message"][2])
			msg.post(".", "acquire_input_focus")
		end
	end
	countdown_time = countdown_time - 1 * dt
end



