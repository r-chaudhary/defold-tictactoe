-- Nodes
local multi_player_box 
local single_player_txt
local single_player_box
local multi_player_txt
local stats_box
local stats_txt
local settings_box
local settings_txt
local quit_box
local quit_txt

-- Vars
local hover_color = vmath.vector4(0.5, 0.9, 0.9, 1)
local default_color = vmath.vector4(1, 1, 1, 1)
local touch = hash("touch")
local proxy_controller = msg.url("main", hash("/proxy"), "proxy_controller")

---------------------------------- FUNCtions ----------------------------------
local function start_single_player()
	msg.post(proxy_controller, "load_single_player")
end


local function start_multi_player()
	msg.post(proxy_controller, "load_multi_player")
end


local function disable_gui()
	msg.post(".", "release_input_focus")
end


local function enable_gui()
	msg.post(".", "acquire_input_focus")
end


function init(self)
	multi_player_box = gui.get_node("multi_player_box") 
	single_player_txt = gui.get_node("single_player_txt")
	single_player_box = gui.get_node("single_player_box")
	multi_player_txt = gui.get_node("multi_player_txt")
	stats_box = gui.get_node("stats_box")
	stats_txt = gui.get_node("stats_txt")
	settings_box = gui.get_node("settings_box")
	settings_txt = gui.get_node("settings_txt")
	quit_box = gui.get_node("quit_box")
	quit_txt = gui.get_node("quit_txt")

	gui.set_enabled(settings_box, false)
	gui.set_enabled(settings_txt, false)
	enable_gui()
end

function on_input(self, action_id, action)
	-- Single Player Clicked
	if action_id == touch and gui.pick_node(single_player_box, action.x, action.y) and action.pressed then
		gui.set_enabled(single_player_txt, false)
		disable_gui()
		start_single_player()
	end

	-- Multi Player Clicked
	if action_id == touch and gui.pick_node(multi_player_box, action.x, action.y) and action.pressed then
		gui.set_enabled(multi_player_txt, false)
		disable_gui()
		start_multi_player()
	end

	-- Stats Clicked
	if action_id == touch and gui.pick_node(stats_box, action.x, action.y) and action.pressed then
		gui.set_enabled(stats_txt, false)
		disable_gui()
		msg.post(proxy_controller, "load_stats")
	end

	-- Settings Clicked
	if action_id == touch and gui.is_enabled(settings_box) and gui.pick_node(settings_box, action.x, action.y) and action.pressed then
		gui.set_enabled(settings_txt, false)
		disable_gui()
		msg.post(proxy_controller, "load_settings")
	end

	-- Quit Clicked
	if action_id == touch and gui.pick_node(quit_box, action.x, action.y) and action.pressed then
		msg.post("@system:", "exit", {code = 0})
	end



	-- Hover Effect
	
	if action_id == nil then
		-- hover single player
		if gui.pick_node(single_player_box, action.x, action.y) then
			gui.set_color(single_player_txt, hover_color)
		else
			gui.set_color(single_player_txt, default_color)
		end

		-- hover multi player
		if gui.pick_node(multi_player_box, action.x, action.y) then
			gui.set_color(multi_player_txt, hover_color)
		else
			gui.set_color(multi_player_txt, default_color)
		end

		-- hover stats player
		if gui.pick_node(stats_box, action.x, action.y) then
			gui.set_color(stats_txt, hover_color)
		else
			gui.set_color(stats_txt, default_color)
		end

		-- hover multi player
		if gui.pick_node(settings_box, action.x, action.y) then
			gui.set_color(settings_txt, hover_color)
		else
			gui.set_color(settings_txt, default_color)
		end
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end
